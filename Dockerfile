FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Create agents directory structure 
RUN mkdir -p /app/agents /app/data /app/backups && \
    chmod -R 755 /app/agents /app/data /app/backups

# Create __init__.py in the agents directory
RUN echo "# Agents package" > /app/agents/__init__.py

# Create simple agent files
RUN echo 'from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\nfrom typing import List, Dict, Any, Optional\nimport os\nfrom datetime import datetime\n\napp = FastAPI()\n\nclass VideoData(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    description: Optional[str] = None\n    views: int = Field(..., ge=0)\n    publishedAt: str\n    channel: Optional[str] = None\n\nclass ContentAnalysisRequest(BaseModel):\n    videos: List[VideoData]\n    analysis_type: str = "full"\n\n@app.get("/health")\nasync def health_check():\n    return {\n        "status": "healthy",\n        "timestamp": datetime.utcnow().isoformat(),\n        "component": "strategy-agent"\n    }\n\n@app.post("/analyze")\nasync def analyze_content_post(request: ContentAnalysisRequest):\n    try:\n        # Simplified response for testing\n        return {\n            "hook_patterns": [\n                {"type": "Question", "example": "Example question hook"}\n            ],\n            "format_trends": [\n                "Trend 1", \n                "Trend 2"\n            ],\n            "engagement_tactics": [\n                "Tactic 1", \n                "Tactic 2"\n            ],\n            "content_themes": [\n                "Theme 1", \n                "Theme 2"\n            ],\n            "summary": "This is a simplified analysis response for testing."\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/analyze")\nasync def analyze_content_get():\n    return {\n        "message": "Please use POST method for this endpoint with a request body",\n        "example_body": {\n            "videos": [\n                {\n                    "title": "Example Video Title",\n                    "description": "Example description",\n                    "views": 1000,\n                    "publishedAt": "2023-01-01",\n                    "channel": "Example Channel"\n                }\n            ],\n            "analysis_type": "full"\n        }\n    }' > /app/agents/simple_strategy_agent.py

RUN echo 'from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\nfrom typing import List, Dict, Any, Optional\nimport os\nfrom datetime import datetime\n\napp = FastAPI()\n\nclass ScriptRequest(BaseModel):\n    topic: str = Field(..., min_length=1, max_length=200)\n    tone: str = Field(default="informative")\n    duration: int = Field(default=60, ge=30, le=600)\n    target_audience: Optional[str] = None\n    key_points: Optional[List[str]] = None\n\nclass ScriptResponse(BaseModel):\n    title: str\n    intro: str\n    body: List[str]\n    outro: str\n    hooks: List[str]\n    estimated_duration: int\n    tags: List[str]\n\n@app.get("/health")\nasync def health_check():\n    return {\n        "status": "healthy",\n        "timestamp": datetime.utcnow().isoformat(),\n        "component": "scriptwriter-agent"\n    }\n\n@app.post("/generate-script")\nasync def generate_script(request: ScriptRequest):\n    try:\n        # Simplified response for testing\n        return {\n            "title": f"Video Script: {request.topic}",\n            "intro": f"Hey everyone! Today we\'re talking about {request.topic}. Let\'s dive right in!",\n            "body": [\n                f"First, let\'s explore why {request.topic} is important.",\n                f"Many people don\'t realize that {request.topic} can actually improve your daily life.",\n                f"Let me share a quick tip about {request.topic} that changed everything for me.",\n                f"The most surprising thing about {request.topic} is how simple it can be to get started."\n            ],\n            "outro": "That\'s all for today! If you found this helpful, don\'t forget to like and subscribe.",\n            "hooks": [\n                f"Did you know this secret about {request.topic}?",\n                f"This {request.topic} hack will save you hours each week!"\n            ],\n            "estimated_duration": request.duration,\n            "tags": [request.topic, request.tone, "tutorial", "tips", "howto"]\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/generate-script")\nasync def generate_script_info():\n    return {\n        "message": "Please use POST method for this endpoint with a request body",\n        "example_body": {\n            "topic": "Productivity Tips for Remote Work",\n            "tone": "conversational",\n            "duration": 180,\n            "target_audience": "professionals",\n            "key_points": ["Time management", "Home office setup", "Work-life balance"]\n        }\n    }' > /app/agents/simple_scriptwriter_agent.py

RUN echo 'from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\nfrom typing import List, Dict, Any, Optional\nimport os\nfrom datetime import datetime\n\napp = FastAPI()\n\nclass VisualPlanRequest(BaseModel):\n    topic: str = Field(..., min_length=1, max_length=200)\n    style: str = Field(default="modern")\n    platform: str = Field(default="instagram")\n    color_scheme: Optional[str] = None\n    references: Optional[List[str]] = None\n\nclass VisualElement(BaseModel):\n    type: str\n    description: str\n    timing: str\n    purpose: str\n\nclass VisualPlanResponse(BaseModel):\n    concept: str\n    visual_elements: List[VisualElement]\n    transitions: List[str]\n    color_palette: List[str]\n    typography: Dict[str, str]\n    music_suggestions: List[str]\n\n@app.get("/health")\nasync def health_check():\n    return {\n        "status": "healthy",\n        "timestamp": datetime.utcnow().isoformat(),\n        "component": "visual-planner-agent"\n    }\n\n@app.post("/create-plan")\nasync def create_visual_plan(request: VisualPlanRequest):\n    try:\n        # Simplified response for testing\n        return {\n            "concept": f"A visually engaging {request.style} video about {request.topic} optimized for {request.platform}",\n            "visual_elements": [\n                {\n                    "type": "opening_shot",\n                    "description": f"Start with a close-up shot of {request.topic} with bold text overlay",\n                    "timing": "0:00 - 0:03",\n                    "purpose": "Hook viewers immediately"\n                },\n                {\n                    "type": "b_roll",\n                    "description": f"Quick montage showing different aspects of {request.topic}",\n                    "timing": "0:04 - 0:10",\n                    "purpose": "Establish context and maintain interest"\n                },\n                {\n                    "type": "text_overlay",\n                    "description": "Key statistics or surprising fact with animated text",\n                    "timing": "0:11 - 0:15",\n                    "purpose": "Create intrigue and information delivery"\n                },\n                {\n                    "type": "closing_shot",\n                    "description": "Zoom out to reveal the full context with call-to-action",\n                    "timing": "0:16 - 0:20",\n                    "purpose": "Leave lasting impression and drive engagement"\n                }\n            ],\n            "transitions": [\n                "Quick zoom transition",\n                "Swipe left reveal",\n                "Glitch effect transition"\n            ],\n            "color_palette": [\n                "#3A86FF", \n                "#FF006E", \n                "#FFBE0B", \n                "#FB5607"\n            ],\n            "typography": {\n                "headlines": "Montserrat Bold",\n                "body": "Roboto Regular",\n                "accents": "Bebas Neue"\n            },\n            "music_suggestions": [\n                "Upbeat electronic",\n                "Minimal ambient",\n                "Light percussion"\n            ]\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/create-plan")\nasync def create_plan_info():\n    return {\n        "message": "Please use POST method for this endpoint with a request body",\n        "example_body": {\n            "topic": "Sustainable Fashion Tips",\n            "style": "minimalist",\n            "platform": "tiktok",\n            "color_scheme": "earthy",\n            "references": ["NatGeo documentaries", "Sustainable fashion brands"]\n        }\n    }' > /app/agents/simple_visual_planner_agent.py

# Copy the entire repository content
COPY . /app/

# Serve HTML test files
RUN mkdir -p /app/static
COPY *.html /app/static/

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Debug - list files to verify
RUN ls -la /app && \
    ls -la /app/agents && \
    ls -la /app/static

# Make start script executable
RUN chmod +x /app/start.sh

# Command to run the application
CMD ["gunicorn", "main:app", "--workers", "2", "--worker-class", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--timeout", "120", "--log-level", "debug"]